name: Audio CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build plugins
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            build_dir: build-win
          - os: macos-latest
            build_dir: build-mac
          - os: ubuntu-latest
            build_dir: build-linux 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
      
      - name: Set up Xcode 15.1
        if: matrix.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.1'

      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install libasound2-dev libjack-jackd2-dev ladspa-sdk libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev mesa-common-dev

      - name: Detect number of CPU cores and set parallel build level
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "CMAKE_BUILD_PARALLEL_LEVEL=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "CMAKE_BUILD_PARALLEL_LEVEL=$Env:NUMBER_OF_PROCESSORS" >> $GITHUB_ENV
        shell: bash

      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=Release -DJUCE_COPY_PLUGIN_AFTER_BUILD=ON -DCI_BUILD=ON -B build -S .

      - name: Build
        run: cmake --build build --config Release

      - name: Kill AudioComponentRegistrar
        if: matrix.os == 'macos-latest'
        run: |
          pgrep -x AudioComponentRegistrar >/dev/null && killall -9 AudioComponentRegistrar; echo "killed AudioComponentRegistrar" || echo "AudioComponentRegistrar Process not found"
        
      - name: Tests
        run: ctest --test-dir build -C Release --output-on-failure

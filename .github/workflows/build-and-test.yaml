name: Audio Development

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build plugins
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up Xcode
        if: matrix.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install graphviz libasound2-dev libjack-jackd2-dev ladspa-sdk libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libgtk-3-dev libwebkit2gtk-4.1-dev libglu1-mesa-dev mesa-common-dev libgtkmm-3.0-dev

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Register-PackageSource -ProviderName NuGet -Name nugetRepository -Location https://www.nuget.org/api/v2 -Force
          Install-Package Microsoft.Web.WebView2 -Scope CurrentUser -RequiredVersion 1.0.1901.177 -Source nugetRepository -Force

      - name: Add msbuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Setup MSVC Environment and Export Variables
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          for /f "usebackq tokens=*" %%i in (`vswhere -latest -property installationPath`) do set VS_PATH=%%i
          call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
          set >> %GITHUB_ENV%
      - name: Build
        run: |
          cmake --preset Release
          npm install
          npm run build --ws
          cmake --workflow --preset Release

      - name: Install plugins (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd build

          # Install packaged plugins

          find . -name "*.pkg" -not -path "*/_CPack_Packages/*" | while read pkg_file; do
            echo "Installing: $pkg_file"
            
            # Install and capture the package name from output
            installer_output=$(sudo installer -pkg "$pkg_file" -target / -verbose 2>&1 | tee /dev/stderr)
            app_name=$(echo "$installer_output" | grep "Package name is" | sed 's/installer: Package name is //' | xargs)
            
            # Quick check if app was installed
            if [ ! -z "$app_name" ] && [ -d "/Applications/$app_name.app" ]; then
              echo "✅ $app_name.app installed successfully"
            elif [ ! -z "$app_name" ]; then
              echo "❌ $app_name.app not found in /Applications"
              exit 1
            else
              echo "❌ Could not extract app name from installer output"
              exit 1
            fi
          done

          # Kill AudioComponentRegistrar if running
           pgrep -x AudioComponentRegistrar >/dev/null && killall -9 AudioComponentRegistrar; echo "killed AudioComponentRegistrar" || echo "AudioComponentRegistrar Process not found"

      - name: Run Tests
        run: ctest --preset Release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{matrix.os}}
          path: |
            build/**/*_artefacts/Release/AU/*
            build/**/*_artefacts/Release/Standalone/*
            build/**/*_artefacts/Release/VST3/*
            build/**/*.pkg
            build/**/*.exe
            !build/**/_CPack_Packages
  generate-docs:
    name: Verify Doxygen documentation generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Configure Doxygen
        run: cmake --preset Docs

      - name: Generate Documentation
        run: cmake --build --preset Docs

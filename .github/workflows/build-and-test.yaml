name: Audio Development

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build plugins
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up Xcode
        if: matrix.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install graphviz libasound2-dev libjack-jackd2-dev ladspa-sdk libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libgtk-3-dev libwebkit2gtk-4.1-dev libglu1-mesa-dev mesa-common-dev libgtkmm-3.0-dev

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Register-PackageSource -ProviderName NuGet -Name nugetRepository -Location https://www.nuget.org/api/v2 -Force
          Install-Package Microsoft.Web.WebView2 -Scope CurrentUser -RequiredVersion 1.0.1901.177 -Source nugetRepository -Force

      - name: Add msbuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Setup MSVC Environment and Export Variables
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          for /f "usebackq tokens=*" %%i in (`vswhere -latest -property installationPath`) do set VS_PATH=%%i
          call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
          set >> %GITHUB_ENV%
      - name: Build
        run: |
          cmake --preset Release
          npm install
          npm run build --ws
          cmake --workflow --preset Release
      
      - name: Install plugins (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd build
          
          # Install all .exe files from the installers directory
          if (Test-Path "installers") {
            Get-ChildItem -Path "installers" -Filter "*.exe" | ForEach-Object {
              $installerPath = $_.FullName
              Write-Host "Installing: $($_.Name)"
              Write-Host "Full path: $installerPath"
              
              # Check installer file properties
              $fileInfo = Get-ItemProperty $installerPath
              Write-Host "Installer size: $($fileInfo.Length) bytes"
              Write-Host "Installer modified: $($fileInfo.LastWriteTime)"
              
              # Check what's in VST3 directory before installation
              $vst3Dir = "C:\Program Files\Common Files\VST3"
              Write-Host "VST3 directory contents before installation:"
              if (Test-Path $vst3Dir) {
                Get-ChildItem $vst3Dir | ForEach-Object { Write-Host "  $($_.Name)" }
              } else {
                Write-Host "  VST3 directory does not exist"
              }
              
              # Try different silent installation approaches for better compatibility
              Write-Host "Attempting silent installation..."
              
              # First try without elevation (CI runners may not need it)
              Write-Host "Trying installation without elevation first..."
              $process = Start-Process -FilePath $installerPath -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/CLOSEAPPLICATIONS", "/LOG" -Wait -PassThru
              
              # If that fails, try with elevation
              if ($process.ExitCode -ne 0 -and $process.ExitCode -ne 1) {
                Write-Host "First attempt failed, trying with elevation..."
                $process = Start-Process -FilePath $installerPath -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/CLOSEAPPLICATIONS", "/LOG" -Wait -PassThru -Verb RunAs
              }
              
              # Check what's in VST3 directory after installation
              Write-Host "VST3 directory contents after installation:"
              if (Test-Path $vst3Dir) {
                Get-ChildItem $vst3Dir -Recurse | ForEach-Object { 
                  if ($_.PSIsContainer) {
                    Write-Host "  [DIR]  $($_.FullName)"
                  } else {
                    Write-Host "  [FILE] $($_.FullName) ($($_.Length) bytes)"
                  }
                }
              } else {
                Write-Host "  VST3 directory still does not exist"
              }
              
              # Also check other common plugin directories
              $programFiles = "C:\Program Files"
              $programFilesX86 = "C:\Program Files (x86)"
              Write-Host "Searching for Black Lounge files in Program Files..."
              
              @($programFiles, $programFilesX86) | ForEach-Object {
                if (Test-Path $_) {
                  Get-ChildItem $_ -Recurse -Filter "*Black*Lounge*" -ErrorAction SilentlyContinue | ForEach-Object {
                    Write-Host "  Found: $($_.FullName)"
                  }
                }
              }
              
              # Check for installation logs
              Write-Host "Checking for installer logs..."
              
              # Check for Inno Setup log files (created by /LOG parameter)
              $logPattern = $env:TEMP + "\Setup Log*.txt"
              Get-ChildItem $env:TEMP -Filter "Setup Log*.txt" -ErrorAction SilentlyContinue | ForEach-Object {
                Write-Host "Found Inno Setup log: $($_.FullName)"
                Write-Host "Log contents (last 30 lines):"
                Get-Content $_.FullName -Tail 30 | ForEach-Object { Write-Host "  $_" }
              }
              
              # Also check for any other log files that might be created
              Get-ChildItem $env:TEMP -Filter "*setup*" -ErrorAction SilentlyContinue | Where-Object { $_.Name -like "*log*" } | ForEach-Object {
                Write-Host "Found setup-related log: $($_.FullName)"
                Write-Host "Log contents (last 20 lines):"
                Get-Content $_.FullName -Tail 20 | ForEach-Object { Write-Host "  $_" }
              }
              
              if ($process.ExitCode -eq 0) {
                Write-Host "✅ $($_.Name) installed successfully"
              } elseif ($process.ExitCode -eq 1) {
                Write-Host "⚠️ $($_.Name) installation completed with warnings (exit code 1) - this might be normal"
                Write-Host "✅ Continuing as installation likely succeeded"
              } else {
                Write-Host "❌ $($_.Name) installation failed with exit code: $($process.ExitCode)"
                
                # Try to get more information about the failure
                Write-Host "Checking if installer file exists and is valid..."
                if (Test-Path $installerPath) {
                  $fileInfo = Get-ItemProperty $installerPath
                  Write-Host "File size: $($fileInfo.Length) bytes"
                  Write-Host "File version: $($fileInfo.VersionInfo.FileVersion)"
                } else {
                  Write-Host "❌ Installer file not found!"
                }
                
                exit 1
              }
            }
          } else {
            Write-Host "No installers directory found"
            exit 0
          }



      - name: Install plugins (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd build

          # Install all .pkg files from the installers directory
          if [ -d "installers" ]; then
            find installers -name "*.pkg" -maxdepth 1 | while read pkg_file; do
              echo "Installing: $pkg_file"
              
              # Install and capture the package name from output
              installer_output=$(sudo installer -pkg "$pkg_file" -target / -verbose 2>&1 | tee /dev/stderr)
              app_name=$(echo "$installer_output" | grep "Package name is" | sed 's/installer: Package name is //' | xargs)
              
              # Quick check if app was installed
              if [ ! -z "$app_name" ] && [ -d "/Applications/$app_name.app" ]; then
                echo "✅ $app_name.app installed successfully"
              elif [ ! -z "$app_name" ]; then
                echo "❌ $app_name.app not found in /Applications"
                exit 1
              else
                echo "❌ Could not extract app name from installer output"
                exit 1
              fi
            done
          else
            echo "No installers directory found"
            exit 0
          fi

          # Kill AudioComponentRegistrar if running
          pgrep -x AudioComponentRegistrar >/dev/null && killall -9 AudioComponentRegistrar; echo "killed AudioComponentRegistrar" || echo "AudioComponentRegistrar Process not found"

      - name: Run Tests
        run: ctest --preset Release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{matrix.os}}
          path: |
            build/**/*_artefacts/Release/AU/*
            build/**/*_artefacts/Release/Standalone/*
            build/**/*_artefacts/Release/VST3/*
            build/**/*.pkg
            build/**/*.exe
            !build/**/_CPack_Packages
            !build/_deps/**
            !build/bin/**
            !build/CMakeFiles/**
  generate-docs:
    name: Verify Doxygen documentation generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Configure Doxygen
        run: cmake --preset Docs

      - name: Generate Documentation
        run: cmake --build --preset Docs

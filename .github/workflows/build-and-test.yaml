name: Audio Development

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build plugins
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up Xcode
        if: matrix.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install graphviz libasound2-dev libjack-jackd2-dev ladspa-sdk libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libgtk-3-dev libwebkit2gtk-4.1-dev libglu1-mesa-dev mesa-common-dev

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Register-PackageSource -ProviderName NuGet -Name nugetRepository -Location https://www.nuget.org/api/v2 -Force
          Install-Package Microsoft.Web.WebView2 -Scope CurrentUser -RequiredVersion 1.0.1901.177 -Source nugetRepository -Force

      - name: Add msbuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Setup MSVC Environment and Export Variables
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          for /f "usebackq tokens=*" %%i in (`vswhere -latest -property installationPath`) do set VS_PATH=%%i
          call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
          set >> %GITHUB_ENV%

      # - name: Setup MSVC Environment
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     echo "CC=C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.42.34433/bin/Hostx64/x64/cl.exe" >> $GITHUB_ENV
      #     echo "CXX=C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.42.34433/bin/Hostx64/x64/cl.exe" >> $GITHUB_ENV

      # shell: cmd
      # run: |
      #   call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

      # - name: Set CMake default generator
      #   if: matrix.os == 'macos-latest'
      #   run: echo "CMAKE_GENERATOR=Xcode" >> $GITHUB_ENV

      - name: Build
        run: cmake --workflow --preset Release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{matrix.os}}
          path: |
            CMakePresets.json
            build/**/CTestTestfile.cmake
            build/**/CMakeCache.txt
            build/**/cmake_install.cmake
            build/**/**/*_artefacts/**
            build/**/**/*.pkg
            build/_deps/pluginval-src
            !build/_deps/juce-*/
            !**/*_SharedCode.*

  test:
    name: Test
    needs: build
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{matrix.os}}

      - name: Change permissions
        if: matrix.os != 'windows-latest'
        run: chmod -R +x build/_deps/pluginval-src/

      - name: Install plugins (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install packaged plugins first
          find build -name "*.pkg" -exec sudo installer -pkg {} -target / -verbose \;

          # Copy AU plugins that don't have installers to user directory
          mkdir -p ~/Library/Audio/Plug-Ins/Components

          for component in $(find build -name "*.component"); do
            plugin_build_dir=$(dirname $(dirname $(dirname $component)))

            # Check if this build directory has a .pkg file
            if [ -z "$(find $plugin_build_dir -maxdepth 1 -name "*.pkg")" ]; then
              echo "Copying $(basename $component) (no installer found)"
              cp -r "$component" ~/Library/Audio/Plug-Ins/Components/
            else
              echo "Skipping $(basename $component) (has installer)"
            fi
          done
        shell: bash

      - name: Register AU plugins
        if: matrix.os == 'macos-latest'
        run: |
          pgrep -x AudioComponentRegistrar >/dev/null && killall -9 AudioComponentRegistrar; echo "killed AudioComponentRegistrar" || echo "AudioComponentRegistrar Process not found"
        shell: bash

      - name: Run Tests
        run: ctest --preset Release

  generate-docs:
    name: Verify Doxygen documentation generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Configure Doxygen
        run: cmake --preset Docs

      - name: Generate Documentation
        run: cmake --build --preset Docs
